# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16oCd2rRDEPb1rtbjQjZnBg2l8RFzVjYX
"""

!pip install pandas transformers torch deep-translator fpdf matplotlib

from google.colab import files
uploaded = files.upload()
filename = list(uploaded.keys())[0]

with open(filename, 'r', encoding='utf-8') as f:
    lines = f.readlines()

import re
import pandas as pd

pattern = r'^\[(\d{2}/\d{2}/\d{4}),\s(\d{2}:\d{2}:\d{2})\]\s(.+?):\s?(.*)'

data = []

for line in lines:
    match = re.match(pattern, line)
    if match:
        date, time, sender, message = match.groups()
        data.append([date, time, sender.strip(), message.strip()])

df = pd.DataFrame(data, columns=['Date', 'Time', 'Sender', 'Message'])
df.head()

from deep_translator import GoogleTranslator

def translate(text):
    try:
        return GoogleTranslator(source='auto', target='en').translate(text)
    except:
        return text

df['Translated'] = df['Message'].apply(translate)
df.head()

from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline
import torch
import torch.nn.functional as F

# Load toxic-bert model
toxic_model_name = "unitary/toxic-bert"
toxic_tokenizer = AutoTokenizer.from_pretrained(toxic_model_name)
toxic_model = AutoModelForSequenceClassification.from_pretrained(toxic_model_name)

# Load zero-shot classifier
deal_classifier = pipeline("zero-shot-classification", model="facebook/bart-large-mnli")

# Toxicity-related labels
toxic_labels = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']
threat_keywords = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult']

# Candidate labels for suspicious deal detection
deal_labels = ["suspicious deal", "casual talk", "transaction", "threat", "meeting", "neutral"]

def classify_combined(text, toxic_threshold=0.5, suspicious_threshold=0.6):
    # 1. Toxic threat detection
    inputs = toxic_tokenizer(text, return_tensors="pt", truncation=True)
    with torch.no_grad():
        logits = toxic_model(**inputs).logits
        probs = F.sigmoid(logits)[0]
    toxic_scores = {label: float(probs[i]) for i, label in enumerate(toxic_labels)}
    toxic_threat = any(toxic_scores[label] > toxic_threshold for label in threat_keywords)

    # 2. Suspicious deal detection
    try:
        deal_result = deal_classifier(text, deal_labels)
        top_label = deal_result['labels'][0]
        top_score = deal_result['scores'][0]
        suspicious = top_label == "suspicious deal" and top_score > suspicious_threshold
    except:
        suspicious = False

    # Final label
    if toxic_threat or suspicious:
        return 'threat'
    else:
        return 'neutral'

# Define the function (as you already did)

# Then apply it to the Translated column
df['FinalLabel'] = df['Translated'].apply(classify_combined)

# Now check the updated DataFrame
df.head()

import matplotlib.pyplot as plt
from fpdf import FPDF
import tempfile
import os

def generate_pie_chart(summary):
    labels = list(summary.keys())
    sizes = list(summary.values())
    colors = ['red' if l == 'threat' else 'green' for l in labels]

    plt.figure(figsize=(4,4))
    plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')
    plt.title('Message Classification Distribution')

    pie_path = tempfile.mktemp(suffix='.png')
    plt.savefig(pie_path, bbox_inches='tight')
    plt.close()
    return pie_path

# STEP 2: Bar Chart of Messages per Sender
def generate_sender_bar_chart(df):
    sender_counts = df['Sender'].value_counts().head(10)

    plt.figure(figsize=(6,4))
    sender_counts.plot(kind='barh', color='skyblue')
    plt.xlabel('Message Count')
    plt.title('Top 10 Most Active Senders')
    plt.tight_layout()

    bar_path = tempfile.mktemp(suffix='.png')
    plt.savefig(bar_path)
    plt.close()
    return bar_path

# STEP 3: Generate PDF Report
def generate_pdf_report(df):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # Title
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(200, 10, txt="WhatsApp Chat Cyberforensic Report", ln=True, align='C')
    pdf.set_font("Arial", size=12)

    # Summary
    summary = df['FinalLabel'].value_counts().to_dict()
    pdf.ln(10)
    pdf.cell(200, 10, txt="Summary of Message Classification:", ln=True)
    for label, count in summary.items():
        pdf.cell(200, 10, txt=f"{label}: {count} messages", ln=True)

    # Charts
    pie_path = generate_pie_chart(summary)
    bar_path = generate_sender_bar_chart(df)

    pdf.ln(10)
    pdf.image(pie_path, w=100)

    pdf.ln(15)
    pdf.cell(200, 10, txt="Top 10 Senders (Bar Chart):", ln=True)
    pdf.image(bar_path, w=100)

    # Top Threat Messages
    pdf.add_page()
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Sample Messages Marked as 'Threat':", ln=True)
    pdf.set_font("Arial", size=11)

    threats = df[df['FinalLabel'] == 'threat'].head(10)
    if threats.empty:
        pdf.cell(200, 10, txt="No threats detected.", ln=True)
    else:
        for i, row in threats.iterrows():
            msg = f"[{row['Date']} {row['Time']}] {row['Sender']}: {row['Message']}"
            pdf.multi_cell(0, 10, txt=msg)
            pdf.ln(1)

    # Save PDF
    output_path = "chat_analysis_report.pdf"
    pdf.output(output_path)

    # Cleanup temp images
    os.remove(pie_path)
    os.remove(bar_path)

    print(f"Report saved to: {output_path}")

# âœ… Run this
generate_pdf_report(df)